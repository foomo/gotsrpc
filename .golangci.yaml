# https://golangci-lint.run/usage/configuration/
version: "2"

run:
  build-tags: [ safe ]
  modules-download-mode: readonly

linters:
  default: none
  enable:
    ## Default linters
    - errcheck # errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases [fast: false, auto-fix: false]
    - govet # (vet, vetshadow) Vet examines Go source code and reports suspicious constructs. It is roughly the same as 'go vet' and uses its passes. [fast: false, auto-fix: false]
    - ineffassign # Detects when assignments to existing variables are not used [fast: true, auto-fix: false]
    - staticcheck # (megacheck) It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary. The author of staticcheck doesn't support or approve the use of staticcheck as a library inside golangci-lint. [fast: false, auto-fix: false]
    - unused # (megacheck) Checks Go code for unused constants, variables, functions and types [fast: false, auto-fix: false]

    ## Recommended linters
    - asasalint # check for pass []any as any in variadic func(...any) [fast: false, auto-fix: false]
    - asciicheck # checks that all code identifiers does not have non-ASCII symbols in the name [fast: true, auto-fix: false]
    - bidichk # Checks for dangerous unicode character sequences [fast: true, auto-fix: false]
    - bodyclose # checks whether HTTP response body is closed successfully [fast: false, auto-fix: false]
    - canonicalheader # checks whether net/http.Header uses canonical header [fast: false, auto-fix: false]
    #- containedctx # containedctx is a linter that detects struct contained context.Context field [fast: false, auto-fix: false]
    #- contextcheck # check whether the function uses a non-inherited context [fast: false, auto-fix: false]
    - copyloopvar # (go >= 1.22) copyloopvar is a linter detects places where loop variables are copied [fast: true, auto-fix: false]
    - decorder # check declaration order and count of types, constants, variables and functions [fast: true, auto-fix: false]
    - errchkjson # Checks types passed to the json encoding functions. Reports unsupported types and reports occations, where the check for the returned error can be omitted. [fast: false, auto-fix: false]
    - durationcheck # check for two durations multiplied together [fast: false, auto-fix: false]
    - errname # Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`. [fast: false, auto-fix: false]
    - errorlint # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13. [fast: false, auto-fix: false]
    - exhaustive # check exhaustiveness of enum switch statements [fast: false, auto-fix: false]
    - exptostd # Detects functions from golang.org/x/exp/ that can be replaced by std functions. [auto-fix]
    - fatcontext # detects nested contexts in loops and function literals [fast: false, auto-fix: false]
    #- forbidigo # Forbids identifiers [fast: false, auto-fix: false]
    - forcetypeassert # finds forced type assertions [fast: true, auto-fix: false]
    - gocheckcompilerdirectives # Checks that go compiler directive comments (//go:) are valid. [fast: true, auto-fix: false]
    - gochecksumtype # Run exhaustiveness checks on Go "sum types" [fast: false, auto-fix: false]
    #- goconst # Finds repeated strings that could be replaced by a constant [fast: true, auto-fix: false]
    - gocritic # Provides diagnostics that check for bugs, performance and style issues. [fast: false, auto-fix: true]
    - goheader # Checks is file header matches to pattern [fast: true, auto-fix: true]
    - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod. [fast: true, auto-fix: false]
    - gomodguard # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations. [fast: true, auto-fix: false]
    - goprintffuncname # Checks that printf-like functions are named with `f` at the end. [fast: true, auto-fix: false]
    - gosec # (gas) Inspects source code for security problems [fast: false, auto-fix: false]
    #- gosmopolitan # Report certain i18n/l10n anti-patterns in your Go codebase [fast: false, auto-fix: false]
    - grouper # Analyze expression groups. [fast: true, auto-fix: false]
    - iface # Detect the incorrect use of interfaces, helping developers avoid interface pollution. [fast: false, auto-fix: false]
    - importas # Enforces consistent import aliases [fast: false, auto-fix: false]
    - inamedparam # reports interfaces with unnamed method parameters [fast: true, auto-fix: false]
    - loggercheck # (logrlint) Checks key value pairs for common logger libraries (kitlog,klog,logr,zap). [fast: false, auto-fix: false]
    - makezero # Finds slice declarations with non-zero initial length [fast: false, auto-fix: false]
    - mirror # reports wrong mirror patterns of bytes/strings usage [fast: false, auto-fix: true]
    - misspell # Finds commonly misspelled English words [fast: true, auto-fix: true]
    - musttag # enforce field tags in (un)marshaled structs [fast: false, auto-fix: false]
    #- nakedret # Checks that functions with naked returns are not longer than a maximum size (can be zero). [fast: true, auto-fix: false]
    - nilerr # Finds the code that returns nil even if it checks that the error is not nil. [fast: false, auto-fix: false]
    - nilnesserr # Reports constructs that checks for err != nil, but returns a different nil value error.
    - nilnil # Checks that there is no simultaneous return of `nil` error and an invalid value. [fast: false, auto-fix: false]
    - noctx # Finds sending http request without context.Context [fast: false, auto-fix: false]
    - nolintlint # Reports ill-formed or insufficient nolint directives [fast: true, auto-fix: true]
    #- nonamedreturns # Reports all named returns [fast: false, auto-fix: false]
    - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL. [fast: true, auto-fix: false]
    #- paralleltest # Detects missing usage of t.Parallel() method in your Go test [fast: false, auto-fix: false]
    - predeclared # find code that shadows one of Go's predeclared identifiers [fast: true, auto-fix: false]
    - promlinter # Check Prometheus metrics naming via promlint [fast: true, auto-fix: false]
    - reassign # Checks that package variables are not reassigned [fast: false, auto-fix: false]
    - recvcheck # checks for receiver type consistency [fast: false, auto-fix: false]
    - revive # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint. [fast: false, auto-fix: false]
    - rowserrcheck # checks whether Rows.Err of rows is checked successfully [fast: false, auto-fix: false]
    - spancheck # Checks for mistakes with OpenTelemetry/Census spans. [fast: false, auto-fix: false]
    - sqlclosecheck # Checks that sql.Rows, sql.Stmt, sqlx.NamedStmt, pgx.Query are closed. [fast: false, auto-fix: false]
    - testableexamples # linter checks if examples are testable (have an expected output) [fast: true, auto-fix: false]
    - testifylint # Checks usage of github.com/stretchr/testify. [fast: false, auto-fix: false]
    #- testpackage # linter that makes you use a separate _test package [fast: true, auto-fix: false]
    - thelper # thelper detects tests helpers which is not start with t.Helper() method. [fast: false, auto-fix: false]
    - tparallel # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes. [fast: false, auto-fix: false]
    - unconvert # Remove unnecessary type conversions [fast: false, auto-fix: false]
    - usestdlibvars # A linter that detect the possibility to use variables/constants from the Go standard library. [fast: true, auto-fix: false]
    - usetesting # Reports uses of functions with replacement inside the testing package. [auto-fix]
    - wastedassign # Finds wasted assignment statements [fast: false, auto-fix: false]
    - whitespace # Whitespace is a linter that checks for unnecessary newlines at the start and end of functions, if, for, etc. [fast: true, auto-fix: true]

    ## Discouraged linters
    #- cyclop # checks function and package cyclomatic complexity [fast: false, auto-fix: false]
    #- depguard # Go linter that checks if package imports are in a list of acceptable packages [fast: true, auto-fix: false]
    #- dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f()) [fast: true, auto-fix: false]
    #- dupl # Tool for code clone detection [fast: true, auto-fix: false]
    #- dupword # checks for duplicate words in the source code [fast: true, auto-fix: false]
    #- dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f()) [fast: true, auto-fix: false]
    #- err113 # Go linter to check the errors handling expressions [fast: false, auto-fix: false]
    #- exhaustruct # Checks if all structure fields are initialized [fast: false, auto-fix: false]
    #- funlen # Tool for detection of long functions [fast: true, auto-fix: false]
    #- ginkgolinter # enforces standards of using ginkgo and gomega [fast: false, auto-fix: false]
    #- gochecknoglobals # Check that no global variables exist. [fast: false, auto-fix: false]
    #- gochecknoinits # Checks that no init functions are present in Go code [fast: true, auto-fix: false]
    #- gocognit # Computes and checks the cognitive complexity of functions [fast: true, auto-fix: false]
    #- gocyclo # Computes and checks the cyclomatic complexity of functions [fast: true, auto-fix: false]
    #- godot # Check if comments end in a period [fast: true, auto-fix: true]
    #- godox # Tool for detection of comment keywords [fast: true, auto-fix: false]
    #- interfacebloat # A linter that checks the number of methods inside an interface. [fast: true, auto-fix: false]
    #- intrange # (go >= 1.22) intrange is a linter to find places where for loops could make use of an integer range. [fast: true, auto-fix: false]
    #- ireturn # Accept Interfaces, Return Concrete Types [fast: false, auto-fix: false]
    #- lll # Reports long lines [fast: true, auto-fix: false]
    #- maintidx # maintidx measures the maintainability index of each function. [fast: true, auto-fix: false]
    #- nestif # Reports deeply nested if statements [fast: true, auto-fix: false]
    #- nlreturn # nlreturn checks for a new line before return and branch statements to increase code clarity [fast: true, auto-fix: false]
    #- mnd # An analyzer to detect magic numbers. [fast: true, auto-fix: false]
    #- perfsprint # Checks that fmt.Sprintf can be replaced with a faster alternative. [fast: false, auto-fix: false]
    #- prealloc # Finds slice declarations that could potentially be pre-allocated [fast: true, auto-fix: false]
    #- protogetter # Reports direct reads from proto message fields when getters should be used [fast: false, auto-fix: true]
    #- sloglint # ensure consistent code style when using log/slog [fast: false, auto-fix: false]
    #- tagalign # check that struct tags are well aligned [fast: true, auto-fix: true]
    #- tagliatelle # Checks the struct tags. [fast: true, auto-fix: false]
    #- unparam # Reports unused function parameters [fast: false, auto-fix: false]
    #- varnamelen # checks that the length of a variable's name matches its scope [fast: false, auto-fix: false]
    #- wrapcheck # Checks that errors returned from external packages are wrapped [fast: false, auto-fix: false]
    #- wsl # add or remove empty lines [fast: true, auto-fix: false]
    #- zerologlint # Detects the wrong usage of `zerolog` that a user forgets to dispatch with `Send` or `Msg` [fast: false, auto-fix: false]
  settings:
    gocritic:
      disabled-checks:
        - ifElseChain
      enabled-tags:
        - diagnostic
        - performance
        - style
      disabled-tags:
        - experimental
        - opinionated
      settings:
        hugeParam:
          sizeThreshold: 512
    gosec:
      excludes:
        - G101
        - G102
        - G112
        - G401
        - G402
        - G404
        - G501
        - G505
    revive:
      rules:
        - name: indent-error-flow
          disabled: true
    staticcheck:
      checks:
        - all
        - -SA1019
    tagliatelle:
      case:
        rules:
          bson: camel
          json: camel
          yaml: camel
        use-field-name: true
  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    paths:
      - third_party$
      - builtin$
      - examples$
formatters:
  enable:
    - gofmt
    - goimports
  exclusions:
    generated: lax
    paths:
      - third_party$
      - builtin$
      - examples$
