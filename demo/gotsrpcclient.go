// Code generated by gotsrpc https://github.com/foomo/gotsrpc  - DO NOT EDIT.

package demo

import (
	net_http "net/http"

	gotsrpc "github.com/foomo/gotsrpc"
	github_com_foomo_gotsrpc_demo_nested "github.com/foomo/gotsrpc/demo/nested"
)

type FooGoTSRPCClient interface {
	Hello(number int64) (retHello_0 int, clientErr error)
}

type HTTPFooGoTSRPCClient struct {
	URL      string
	EndPoint string
	Client   gotsrpc.Client
}

func NewDefaultFooGoTSRPCClient(url string) *HTTPFooGoTSRPCClient {
	return NewFooGoTSRPCClient(url, "/service/foo")
}

func NewFooGoTSRPCClient(url string, endpoint string) *HTTPFooGoTSRPCClient {
	return NewFooGoTSRPCClientWithClient(url, endpoint, nil)
}

func NewFooGoTSRPCClientWithClient(url string, endpoint string, client *net_http.Client) *HTTPFooGoTSRPCClient {
	return &HTTPFooGoTSRPCClient{
		URL:      url,
		EndPoint: endpoint,
		Client:   gotsrpc.NewClientWithHttpClient(client),
	}
}
func (tsc *HTTPFooGoTSRPCClient) Hello(number int64) (retHello_0 int, clientErr error) {
	args := []interface{}{number}
	reply := []interface{}{&retHello_0}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "Hello", args, reply)
	return
}

type DemoGoTSRPCClient interface {
	Any(any github_com_foomo_gotsrpc_demo_nested.Any, anyList []github_com_foomo_gotsrpc_demo_nested.Any, anyMap map[string]github_com_foomo_gotsrpc_demo_nested.Any) (retAny_0 github_com_foomo_gotsrpc_demo_nested.Any, retAny_1 []github_com_foomo_gotsrpc_demo_nested.Any, retAny_2 map[string]github_com_foomo_gotsrpc_demo_nested.Any, clientErr error)
	ExtractAddress(person *Person) (addr *Address, e *Err, clientErr error)
	GiveMeAScalar() (amount github_com_foomo_gotsrpc_demo_nested.Amount, wahr github_com_foomo_gotsrpc_demo_nested.True, hier ScalarInPlace, clientErr error)
	Hello(name string) (retHello_0 string, retHello_1 *Err, clientErr error)
	HelloInterface(anything interface{}, anythingMap map[string]interface{}, anythingSlice []interface{}) (clientErr error)
	HelloNumberMaps(intMap map[int]string) (floatMap map[float64]string, clientErr error)
	HelloScalarError() (err *ScalarError, clientErr error)
	MapCrap() (crap map[string][]int, clientErr error)
	Nest() (retNest_0 []*github_com_foomo_gotsrpc_demo_nested.Nested, clientErr error)
	TestScalarInPlace() (retTestScalarInPlace_0 ScalarInPlace, clientErr error)
}

type HTTPDemoGoTSRPCClient struct {
	URL      string
	EndPoint string
	Client   gotsrpc.Client
}

func NewDefaultDemoGoTSRPCClient(url string) *HTTPDemoGoTSRPCClient {
	return NewDemoGoTSRPCClient(url, "/service/demo")
}

func NewDemoGoTSRPCClient(url string, endpoint string) *HTTPDemoGoTSRPCClient {
	return NewDemoGoTSRPCClientWithClient(url, endpoint, nil)
}

func NewDemoGoTSRPCClientWithClient(url string, endpoint string, client *net_http.Client) *HTTPDemoGoTSRPCClient {
	return &HTTPDemoGoTSRPCClient{
		URL:      url,
		EndPoint: endpoint,
		Client:   gotsrpc.NewClientWithHttpClient(client),
	}
}
func (tsc *HTTPDemoGoTSRPCClient) Any(any github_com_foomo_gotsrpc_demo_nested.Any, anyList []github_com_foomo_gotsrpc_demo_nested.Any, anyMap map[string]github_com_foomo_gotsrpc_demo_nested.Any) (retAny_0 github_com_foomo_gotsrpc_demo_nested.Any, retAny_1 []github_com_foomo_gotsrpc_demo_nested.Any, retAny_2 map[string]github_com_foomo_gotsrpc_demo_nested.Any, clientErr error) {
	args := []interface{}{any, anyList, anyMap}
	reply := []interface{}{&retAny_0, &retAny_1, &retAny_2}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "Any", args, reply)
	return
}

func (tsc *HTTPDemoGoTSRPCClient) ExtractAddress(person *Person) (addr *Address, e *Err, clientErr error) {
	args := []interface{}{person}
	reply := []interface{}{&addr, &e}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "ExtractAddress", args, reply)
	return
}

func (tsc *HTTPDemoGoTSRPCClient) GiveMeAScalar() (amount github_com_foomo_gotsrpc_demo_nested.Amount, wahr github_com_foomo_gotsrpc_demo_nested.True, hier ScalarInPlace, clientErr error) {
	args := []interface{}{}
	reply := []interface{}{&amount, &wahr, &hier}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "GiveMeAScalar", args, reply)
	return
}

func (tsc *HTTPDemoGoTSRPCClient) Hello(name string) (retHello_0 string, retHello_1 *Err, clientErr error) {
	args := []interface{}{name}
	reply := []interface{}{&retHello_0, &retHello_1}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "Hello", args, reply)
	return
}

func (tsc *HTTPDemoGoTSRPCClient) HelloInterface(anything interface{}, anythingMap map[string]interface{}, anythingSlice []interface{}) (clientErr error) {
	args := []interface{}{anything, anythingMap, anythingSlice}
	reply := []interface{}{}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "HelloInterface", args, reply)
	return
}

func (tsc *HTTPDemoGoTSRPCClient) HelloNumberMaps(intMap map[int]string) (floatMap map[float64]string, clientErr error) {
	args := []interface{}{intMap}
	reply := []interface{}{&floatMap}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "HelloNumberMaps", args, reply)
	return
}

func (tsc *HTTPDemoGoTSRPCClient) HelloScalarError() (err *ScalarError, clientErr error) {
	args := []interface{}{}
	reply := []interface{}{&err}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "HelloScalarError", args, reply)
	return
}

func (tsc *HTTPDemoGoTSRPCClient) MapCrap() (crap map[string][]int, clientErr error) {
	args := []interface{}{}
	reply := []interface{}{&crap}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "MapCrap", args, reply)
	return
}

func (tsc *HTTPDemoGoTSRPCClient) Nest() (retNest_0 []*github_com_foomo_gotsrpc_demo_nested.Nested, clientErr error) {
	args := []interface{}{}
	reply := []interface{}{&retNest_0}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "Nest", args, reply)
	return
}

func (tsc *HTTPDemoGoTSRPCClient) TestScalarInPlace() (retTestScalarInPlace_0 ScalarInPlace, clientErr error) {
	args := []interface{}{}
	reply := []interface{}{&retTestScalarInPlace_0}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "TestScalarInPlace", args, reply)
	return
}

type BarGoTSRPCClient interface {
	Hello(number int64) (retHello_0 int, clientErr error)
}

type HTTPBarGoTSRPCClient struct {
	URL      string
	EndPoint string
	Client   gotsrpc.Client
}

func NewDefaultBarGoTSRPCClient(url string) *HTTPBarGoTSRPCClient {
	return NewBarGoTSRPCClient(url, "/service/bar")
}

func NewBarGoTSRPCClient(url string, endpoint string) *HTTPBarGoTSRPCClient {
	return NewBarGoTSRPCClientWithClient(url, endpoint, nil)
}

func NewBarGoTSRPCClientWithClient(url string, endpoint string, client *net_http.Client) *HTTPBarGoTSRPCClient {
	return &HTTPBarGoTSRPCClient{
		URL:      url,
		EndPoint: endpoint,
		Client:   gotsrpc.NewClientWithHttpClient(client),
	}
}
func (tsc *HTTPBarGoTSRPCClient) Hello(number int64) (retHello_0 int, clientErr error) {
	args := []interface{}{number}
	reply := []interface{}{&retHello_0}
	clientErr = tsc.Client.Call(tsc.URL, tsc.EndPoint, "Hello", args, reply)
	return
}
